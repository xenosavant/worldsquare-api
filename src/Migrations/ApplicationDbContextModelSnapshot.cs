// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stellmart.Context;

namespace Stellmart.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Stellmart.Api.Context.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Stellmart.Api.Context.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("CountryId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DefaultTwoFatorLockoutMinutes");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<bool>("Flagged");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("ManagedAccount");

                    b.Property<int>("MaxTwoFactorFailedAccessAttempts");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("MustRecoverKey");

                    b.Property<bool>("MustResetKey");

                    b.Property<int?>("NativeCurrencyId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("RewardsLevelId");

                    b.Property<string>("SecurityQuestions");

                    b.Property<string>("SecurityStamp");

                    b.Property<byte[]>("StellarEncryptedSecretKey");

                    b.Property<string>("StellarPublicKey");

                    b.Property<byte[]>("StellarRecoveryKey");

                    b.Property<byte[]>("StellarSecretKeyIv");

                    b.Property<string>("TotpSecret");

                    b.Property<string>("TwoFactorCode");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("TwoFactorFailedCount");

                    b.Property<int?>("TwoFactorTypeId");

                    b.Property<Guid>("UniqueId");

                    b.Property<bool>("UseTwoFactorForLogin");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("VerificationLevelId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NativeCurrencyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RewardsLevelId");

                    b.HasIndex("TwoFactorTypeId");

                    b.HasIndex("VerificationLevelId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DistanceUnitId");

                    b.Property<int>("DistanceUnitTypeId");

                    b.Property<int>("GeoLocationId");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Radius");

                    b.HasKey("Id");

                    b.HasIndex("DistanceUnitId");

                    b.HasIndex("GeoLocationId")
                        .IsUnique();

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractStateId");

                    b.Property<int>("ContractTypeId");

                    b.Property<long>("CurrentSequenceNumber");

                    b.Property<string>("EscrowAccountId")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("ContractStateId");

                    b.HasIndex("ContractTypeId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ContractPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed");

                    b.Property<bool>("Contested");

                    b.Property<int>("ContractId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("SequenceNumber");

                    b.Property<int>("TimeDelay");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractPhases");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int>("OrderNo");

                    b.Property<string>("PhonePrefix");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.CurrencyAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(14, 2)");

                    b.Property<int>("CurrencyTypeId");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.ToTable("CurrencyAmounts");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.GeoLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("GeoLocations");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descriptors");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ListingId");

                    b.Property<string>("SKU");

                    b.Property<string>("UPC");

                    b.Property<Guid>("UniqueId");

                    b.Property<int>("UnitPriceId");

                    b.Property<int>("UnitsAvailable");

                    b.Property<int>("UnitsReturned");

                    b.Property<int>("UnitsSold");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.HasIndex("UnitPriceId")
                        .IsUnique();

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ItemMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemConditionId");

                    b.Property<string>("KeyWords");

                    b.HasKey("Id");

                    b.HasIndex("ItemConditionId");

                    b.ToTable("ItemMetaDatas");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ItemMetaDataCategory", b =>
                {
                    b.Property<int>("ItemMetaDataId");

                    b.Property<int>("CategoryId");

                    b.HasKey("ItemMetaDataId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ItemMetaDataCategories");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.KycData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("AddressLine3");

                    b.Property<string>("AddressLine4");

                    b.Property<string>("AddressLine5");

                    b.Property<string>("AddressLine6");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("Nationality");

                    b.Property<Guid>("UniqueId");

                    b.Property<int>("UserId");

                    b.Property<string>("UserIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KycDatas");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.LineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InventoryItemId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quantity");

                    b.Property<int?>("ShippingManifestId");

                    b.Property<int?>("TradeItemId");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId")
                        .IsUnique()
                        .HasFilter("[InventoryItemId] IS NOT NULL");

                    b.HasIndex("ShippingManifestId");

                    b.HasIndex("TradeItemId")
                        .IsUnique()
                        .HasFilter("[TradeItemId] IS NOT NULL");

                    b.ToTable("LineItems");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("Flagged");

                    b.Property<bool>("Internal");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemMetaDataId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ServiceId");

                    b.Property<int?>("ThreadId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<Guid>("UniqueId");

                    b.Property<int>("UnitTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ItemMetaDataId")
                        .IsUnique();

                    b.HasIndex("ServiceId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MessageThreadId");

                    b.Property<DateTime>("PostedOn");

                    b.Property<int>("PosterId");

                    b.HasKey("Id");

                    b.HasIndex("MessageThreadId");

                    b.HasIndex("PosterId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.MessageThread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("InitiatorId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("MessageThreads");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.OnlineStoreReview", b =>
                {
                    b.Property<int>("OnlineStoreId");

                    b.Property<int>("ReviewId");

                    b.HasKey("OnlineStoreId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("OnlineStoreReviews");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OnlineSaleId");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("OnlineSaleId")
                        .IsUnique();

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.PreTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractPhaseId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("MaximumTime");

                    b.Property<DateTime>("MinimumTime");

                    b.Property<int>("PreTransactionTypeId");

                    b.Property<bool>("Preauthorized");

                    b.Property<bool>("Submitted");

                    b.Property<int?>("TrackerId");

                    b.Property<string>("XdrString");

                    b.HasKey("Id");

                    b.HasIndex("ContractPhaseId");

                    b.HasIndex("TrackerId");

                    b.ToTable("PreTransactions");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.PricePerDistance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyAmountId");

                    b.Property<int>("DistanceUnitId");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyAmountId")
                        .IsUnique();

                    b.HasIndex("DistanceUnitId");

                    b.ToTable("PricePerDistances");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.PricePerTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyAmountId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("TimeUnitId");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyAmountId")
                        .IsUnique();

                    b.HasIndex("TimeUnitId");

                    b.ToTable("PricePerTimes");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ProductShipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuyerSecretKey");

                    b.Property<int>("ContractId");

                    b.Property<int?>("DeliveryRequestId");

                    b.Property<bool>("FulfilledInternally");

                    b.Property<int>("FulfillmentStateId");

                    b.Property<bool>("Internal");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderId");

                    b.Property<string>("PackageSecretKey");

                    b.Property<int?>("ReceiverId");

                    b.Property<int?>("SenderId");

                    b.Property<string>("ShippingCarrierType");

                    b.Property<int>("ShippingManifestId");

                    b.Property<string>("TrackingNumber");

                    b.Property<int?>("TradeId");

                    b.Property<bool>("TradeIn");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("DeliveryRequestId")
                        .IsUnique()
                        .HasFilter("[DeliveryRequestId] IS NOT NULL");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("ShippingManifestId")
                        .IsUnique();

                    b.HasIndex("TradeId");

                    b.ToTable("ProductShipments");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<int?>("ItemMetaDataId");

                    b.Property<int?>("ParentCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("ItemMetaDataId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.ContractState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("ContractStates");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.ContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.DistanceUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("DistanceUnits");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.FulfillmentState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("FulfillmentStates");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.ItemCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("ItemConditions");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.QuantityUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("QuantityUnits");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.RewardsLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("RewardsLevels");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.SecurityQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("SecurityQuestions");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.TimeUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("TimeUnits");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.TradeInState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("TradeInStates");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.TwoFactorAuthenticationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("TwoFactorAuthenticationTypes");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.VerificationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.HasKey("Id");

                    b.ToTable("VerificationLevels");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LocationComponents");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ReviewerId");

                    b.Property<int>("Stars");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.SecretKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("SecretKeys");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SecretKey");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("NativeCurrencyId");

                    b.Property<string>("TagLine");

                    b.Property<Guid>("UniqueId");

                    b.Property<int>("UserId");

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.HasIndex("NativeCurrencyId");

                    b.ToTable("Services");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Service");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DestinationId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("Fulfilled");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("RequestorId");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId")
                        .IsUnique()
                        .HasFilter("[DestinationId] IS NOT NULL");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.ToTable("ServiceRequests");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ServiceRequest");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ServiceRequestFulfillment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("FulfillmentStateId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ServiceId");

                    b.Property<int>("ServiceRequestId");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("FulfillmentStateId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("ServiceRequestFulfillments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ServiceRequestFulfillment");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ShipmentTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SecretSigningKey");

                    b.Property<int>("SignatureId");

                    b.Property<string>("TrackingId");

                    b.HasKey("Id");

                    b.HasIndex("SignatureId")
                        .IsUnique();

                    b.ToTable("ShipmentTrackers");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ShippingManifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.ToTable("ShippingManifests");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Signature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("PreSign");

                    b.Property<int>("PreTransactionId");

                    b.Property<string>("SignatureHash");

                    b.Property<bool>("Signed");

                    b.Property<DateTime>("SignedOn");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("PreTransactionId");

                    b.ToTable("Signatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Signature");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.TradeProductShipment", b =>
                {
                    b.Property<int>("TradeId");

                    b.Property<int>("ProductShipmentId");

                    b.HasKey("TradeId", "ProductShipmentId");

                    b.HasIndex("ProductShipmentId");

                    b.ToTable("TradeProductShipment");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("Interactions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Interaction");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("GeoLocationId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LocationComponentsFromApp");

                    b.Property<string>("LocationComponentsFromGoogleApi");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PlaceId");

                    b.Property<int?>("RegionId");

                    b.Property<Guid>("UniqueId");

                    b.Property<int>("UserId");

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.HasIndex("GeoLocationId")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Stellmart.Api.Context.TradeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemMetaDataId");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Title");

                    b.Property<int?>("TradeInStateId");

                    b.Property<int?>("TradeInValueId");

                    b.Property<Guid>("UniqueId");

                    b.Property<int>("ValueId");

                    b.HasKey("Id");

                    b.HasIndex("ItemMetaDataId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.HasIndex("TradeInStateId");

                    b.HasIndex("ValueId")
                        .IsUnique();

                    b.ToTable("TradeItems");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.BuyerSecretKey", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Entities.SecretKey");

                    b.Property<int>("OrderId");

                    b.Property<int>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BuyerSecretKey");

                    b.HasDiscriminator().HasValue("BuyerSecretKey");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.DeliveryService", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Entities.Service");

                    b.Property<int>("ServiceAreaId");

                    b.HasIndex("ServiceAreaId");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryService");

                    b.HasDiscriminator().HasValue("DeliveryService");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.DistributionCenter", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Entities.Service");

                    b.Property<bool>("Internal");

                    b.HasIndex("UserId")
                        .HasName("IX_Services_UserId1");

                    b.ToTable("DistributionCenter");

                    b.HasDiscriminator().HasValue("DistributionCenter");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.OnlineStore", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Entities.Service");

                    b.Property<bool>("Global");

                    b.Property<bool>("Internal")
                        .HasColumnName("OnlineStore_Internal");

                    b.Property<int?>("ServiceRegionId");

                    b.HasIndex("ServiceRegionId")
                        .IsUnique()
                        .HasFilter("[ServiceRegionId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .HasName("IX_Services_UserId2");

                    b.ToTable("OnlineStore");

                    b.HasDiscriminator().HasValue("OnlineStore");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.RideService", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Entities.Service");


                    b.HasIndex("UserId")
                        .HasName("IX_Services_UserId3");

                    b.ToTable("RideService");

                    b.HasDiscriminator().HasValue("RideService");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.DeliveryRequest", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Entities.ServiceRequest");


                    b.HasIndex("RequestorId");

                    b.ToTable("DeliveryRequest");

                    b.HasDiscriminator().HasValue("DeliveryRequest");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.RideRequest", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Entities.ServiceRequest");


                    b.HasIndex("RequestorId")
                        .HasName("IX_ServiceRequests_RequestorId1");

                    b.ToTable("RideRequest");

                    b.HasDiscriminator().HasValue("RideRequest");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.DeliveryRequestFulfillment", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Entities.ServiceRequestFulfillment");


                    b.ToTable("DeliveryRequestFulfillment");

                    b.HasDiscriminator().HasValue("DeliveryRequestFulfillment");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.SecretSignature", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Entities.Signature");

                    b.Property<string>("SecretKeyHash");

                    b.ToTable("SecretSignature");

                    b.HasDiscriminator().HasValue("SecretSignature");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.SystemSignature", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Entities.Signature");


                    b.ToTable("SystemSignature");

                    b.HasDiscriminator().HasValue("SystemSignature");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.UserSignature", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Entities.Signature");

                    b.Property<int>("SignerId");

                    b.HasIndex("SignerId");

                    b.ToTable("UserSignature");

                    b.HasDiscriminator().HasValue("UserSignature");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.OnlineSale", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Interaction");


                    b.ToTable("OnlineSale");

                    b.HasDiscriminator().HasValue("OnlineSale");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ServiceFulfillment", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Interaction");

                    b.Property<int>("ServiceRequestFulfillmentId");

                    b.HasIndex("ServiceRequestFulfillmentId")
                        .IsUnique()
                        .HasFilter("[ServiceRequestFulfillmentId] IS NOT NULL");

                    b.ToTable("ServiceFulfillment");

                    b.HasDiscriminator().HasValue("ServiceFulfillment");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Trade", b =>
                {
                    b.HasBaseType("Stellmart.Api.Context.Interaction");


                    b.ToTable("Trade");

                    b.HasDiscriminator().HasValue("Trade");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stellmart.Api.Context.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stellmart.Api.Context.ApplicationUser", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.Currency", "NativeCurrency")
                        .WithMany("Users")
                        .HasForeignKey("NativeCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.RewardsLevel", "RewardsLevel")
                        .WithMany("Users")
                        .HasForeignKey("RewardsLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.TwoFactorAuthenticationType", "TwoFactorAuthenticationType")
                        .WithMany("Users")
                        .HasForeignKey("TwoFactorTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.VerificationLevel", "VerificationLevel")
                        .WithMany("Users")
                        .HasForeignKey("VerificationLevelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Area", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.DistanceUnit", "DistanceUnit")
                        .WithMany()
                        .HasForeignKey("DistanceUnitId");

                    b.HasOne("Stellmart.Api.Context.Entities.GeoLocation", "GeoLocation")
                        .WithOne("Area")
                        .HasForeignKey("Stellmart.Api.Context.Entities.Area", "GeoLocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Contract", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.ContractState", "State")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.ContractType", "Type")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ContractPhase", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.Contract", "Contract")
                        .WithMany("Phases")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.CurrencyAmount", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.Currency", "CurrencyType")
                        .WithMany("CurrencyAmounts")
                        .HasForeignKey("CurrencyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.InventoryItem", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.Listing", "Listing")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.CurrencyAmount", "Price")
                        .WithOne("InventoryItem")
                        .HasForeignKey("Stellmart.Api.Context.Entities.InventoryItem", "UnitPriceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ItemMetaData", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.ItemCondition", "ItemCondition")
                        .WithMany("ItemMetaDatas")
                        .HasForeignKey("ItemConditionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ItemMetaDataCategory", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.Category", "Category")
                        .WithMany("ItemMetaDataCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ItemMetaData", "ItemMetaData")
                        .WithMany("ItemMetaDataCategories")
                        .HasForeignKey("ItemMetaDataId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.KycData", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "User")
                        .WithMany("KycDatas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.LineItem", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.InventoryItem", "InventoryItem")
                        .WithOne("LineItem")
                        .HasForeignKey("Stellmart.Api.Context.Entities.LineItem", "InventoryItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ShippingManifest", "ShippingManifest")
                        .WithMany("LineItems")
                        .HasForeignKey("ShippingManifestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.TradeItem", "TradeItem")
                        .WithOne("LineItem")
                        .HasForeignKey("Stellmart.Api.Context.Entities.LineItem", "TradeItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Listing", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ItemMetaData", "ItemMetaData")
                        .WithOne("Listing")
                        .HasForeignKey("Stellmart.Api.Context.Entities.Listing", "ItemMetaDataId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.OnlineStore", "OnlineStore")
                        .WithMany("Listings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.MessageThread", "Thread")
                        .WithMany()
                        .HasForeignKey("ThreadId");

                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.QuantityUnit", "UnitType")
                        .WithMany("Listings")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Message", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.MessageThread", "MessageThread")
                        .WithMany("Messages")
                        .HasForeignKey("MessageThreadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "Poster")
                        .WithMany("Messages")
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.MessageThread", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "Initiator")
                        .WithMany("Threads")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.OnlineStoreReview", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.OnlineStore", "OnlineStore")
                        .WithMany("OnlineStoreReviews")
                        .HasForeignKey("OnlineStoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.Review", "Review")
                        .WithMany("OnlineStoreReviews")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Order", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.OnlineSale", "Sale")
                        .WithOne("Order")
                        .HasForeignKey("Stellmart.Api.Context.Entities.Order", "OnlineSaleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.PreTransaction", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ContractPhase", "Phase")
                        .WithMany("Transactions")
                        .HasForeignKey("ContractPhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ShipmentTracker", "Tracker")
                        .WithMany()
                        .HasForeignKey("TrackerId");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.PricePerDistance", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.CurrencyAmount", "Amount")
                        .WithOne("PricePerDistance")
                        .HasForeignKey("Stellmart.Api.Context.Entities.PricePerDistance", "CurrencyAmountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.DistanceUnit", "DistanceUnit")
                        .WithMany("PricePerDistances")
                        .HasForeignKey("DistanceUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.PricePerTime", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.CurrencyAmount", "Amount")
                        .WithOne("PricePerTime")
                        .HasForeignKey("Stellmart.Api.Context.Entities.PricePerTime", "CurrencyAmountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.TimeUnit", "TimeUnit")
                        .WithMany("PricePerTimes")
                        .HasForeignKey("TimeUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ProductShipment", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.Contract", "Contract")
                        .WithOne("ProductShipment")
                        .HasForeignKey("Stellmart.Api.Context.Entities.ProductShipment", "ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.DeliveryRequest", "DeliveryRequest")
                        .WithOne("Shipment")
                        .HasForeignKey("Stellmart.Api.Context.Entities.ProductShipment", "DeliveryRequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "Receiver")
                        .WithMany("ReceivedShipments")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "Sender")
                        .WithMany("SentShipments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ShippingManifest", "Manifest")
                        .WithOne("Shipment")
                        .HasForeignKey("Stellmart.Api.Context.Entities.ProductShipment", "ShippingManifestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.Trade", "Trade")
                        .WithMany()
                        .HasForeignKey("TradeId");
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ReadOnly.Category", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ItemMetaData")
                        .WithMany("Categories")
                        .HasForeignKey("ItemMetaDataId");

                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Review", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Service", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.Currency", "NativeCurrency")
                        .WithMany("Services")
                        .HasForeignKey("NativeCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ServiceRequest", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Location", "Destination")
                        .WithOne("ServiceRequestDestination")
                        .HasForeignKey("Stellmart.Api.Context.Entities.ServiceRequest", "DestinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Location", "Location")
                        .WithOne("ServiceRequestLocation")
                        .HasForeignKey("Stellmart.Api.Context.Entities.ServiceRequest", "LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ServiceRequestFulfillment", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.Contract", "Contract")
                        .WithOne("Fulfillment")
                        .HasForeignKey("Stellmart.Api.Context.Entities.ServiceRequestFulfillment", "ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.FulfillmentState", "FulfillmentState")
                        .WithMany("Fulfillments")
                        .HasForeignKey("FulfillmentStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.Service", "Service")
                        .WithMany("Fulfillments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ServiceRequest", "ServiceRequest")
                        .WithMany("Fulfillments")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ShipmentTracker", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.SecretSignature", "Signature")
                        .WithOne("Tracker")
                        .HasForeignKey("Stellmart.Api.Context.Entities.ShipmentTracker", "SignatureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.Signature", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.PreTransaction", "Transaction")
                        .WithMany("Signatures")
                        .HasForeignKey("PreTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.TradeProductShipment", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ProductShipment", "ProductShipment")
                        .WithMany("TradeProductShipments")
                        .HasForeignKey("ProductShipmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.Trade", "Trade")
                        .WithMany("TradeProductShipments")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Location", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.GeoLocation", "GeoLocation")
                        .WithOne("Location")
                        .HasForeignKey("Stellmart.Api.Context.Location", "GeoLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stellmart.Api.Context.TradeItem", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ItemMetaData", "ItemMetaData")
                        .WithOne("TradeItem")
                        .HasForeignKey("Stellmart.Api.Context.TradeItem", "ItemMetaDataId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "Owner")
                        .WithMany("TradeItems")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.ReadOnly.TradeInState", "TradeInState")
                        .WithMany("TradeItems")
                        .HasForeignKey("TradeInStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.Entities.CurrencyAmount", "TradeInValue")
                        .WithOne("TradeItem")
                        .HasForeignKey("Stellmart.Api.Context.TradeItem", "ValueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.BuyerSecretKey", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "Buyer")
                        .WithMany("BuyerSecretKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.DeliveryService", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.Area", "ServiceArea")
                        .WithMany("DeliveryServices")
                        .HasForeignKey("ServiceAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "User")
                        .WithMany("DeliveryServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.DistributionCenter", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "User")
                        .WithMany("DistributionCenters")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Services_AspNetUsers_UserId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.OnlineStore", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.Region", "ServiceRegion")
                        .WithOne("OnlineStore")
                        .HasForeignKey("Stellmart.Api.Context.Entities.OnlineStore", "ServiceRegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "User")
                        .WithMany("OnlineStores")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Services_AspNetUsers_UserId2")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.RideService", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "User")
                        .WithMany("RideServices")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Services_AspNetUsers_UserId3")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.DeliveryRequest", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "Requestor")
                        .WithMany("DeliveryRequests")
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.RideRequest", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "Requestor")
                        .WithMany("RideRequests")
                        .HasForeignKey("RequestorId")
                        .HasConstraintName("FK_ServiceRequests_AspNetUsers_RequestorId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.UserSignature", b =>
                {
                    b.HasOne("Stellmart.Api.Context.ApplicationUser", "Signer")
                        .WithMany("Signatures")
                        .HasForeignKey("SignerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stellmart.Api.Context.Entities.ServiceFulfillment", b =>
                {
                    b.HasOne("Stellmart.Api.Context.Entities.ServiceRequestFulfillment", "ServiceRequestFulfillment")
                        .WithOne("ServiceFulfillment")
                        .HasForeignKey("Stellmart.Api.Context.Entities.ServiceFulfillment", "ServiceRequestFulfillmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
